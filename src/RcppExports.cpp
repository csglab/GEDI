// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigenMatProduct
SEXP eigenMatProduct(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_eigenMatProduct(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatProduct(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatTcrossprod
SEXP eigenMatTcrossprod(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_eigenMatTcrossprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatTcrossprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatCrossprod
SEXP eigenMatCrossprod(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_eigenMatCrossprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatCrossprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatVecProduct
SEXP eigenMatVecProduct(Eigen::MatrixXd A, Eigen::VectorXd b);
RcppExport SEXP _GEDI_eigenMatVecProduct(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatVecProduct(A, b));
    return rcpp_result_gen;
END_RCPP
}
// eigenVecMatProduct
SEXP eigenVecMatProduct(Eigen::VectorXd a, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_eigenVecMatProduct(SEXP aSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenVecMatProduct(a, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenVecVecProduct
SEXP eigenVecVecProduct(Eigen::VectorXd a, Eigen::VectorXd b);
RcppExport SEXP _GEDI_eigenVecVecProduct(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenVecVecProduct(a, b));
    return rcpp_result_gen;
END_RCPP
}
// eigenRowL2
SEXP eigenRowL2(Eigen::MatrixXd A);
RcppExport SEXP _GEDI_eigenRowL2(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigenRowL2(A));
    return rcpp_result_gen;
END_RCPP
}
// eigenColL2
SEXP eigenColL2(Eigen::MatrixXd A);
RcppExport SEXP _GEDI_eigenColL2(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigenColL2(A));
    return rcpp_result_gen;
END_RCPP
}
// eigenColL1
SEXP eigenColL1(Eigen::MatrixXd A);
RcppExport SEXP _GEDI_eigenColL1(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigenColL1(A));
    return rcpp_result_gen;
END_RCPP
}
// eigenRowMult
SEXP eigenRowMult(Eigen::MatrixXd A, Eigen::ArrayXd b);
RcppExport SEXP _GEDI_eigenRowMult(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenRowMult(A, b));
    return rcpp_result_gen;
END_RCPP
}
// solveBi
SEXP solveBi(Eigen::MatrixXd Yi, Eigen::VectorXd D, Eigen::MatrixXd Z, Eigen::MatrixXd Qi, Eigen::MatrixXd diagK, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi);
RcppExport SEXP _GEDI_solveBi(SEXP YiSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP QiSEXP, SEXP diagKSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Qi(QiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diagK(diagKSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    rcpp_result_gen = Rcpp::wrap(solveBi(Yi, D, Z, Qi, diagK, si, o, oi));
    return rcpp_result_gen;
END_RCPP
}
// Yi_resZ
SEXP Yi_resZ(Eigen::MatrixXd Yi, Eigen::MatrixXd QiDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi);
RcppExport SEXP _GEDI_Yi_resZ(SEXP YiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_resZ(Yi, QiDBi, si, o, oi));
    return rcpp_result_gen;
END_RCPP
}
// solveZ_noC
SEXP solveZ_noC(Eigen::MatrixXd Y_res, Eigen::VectorXd D, Eigen::MatrixXd B, Eigen::MatrixXd diagK, double lambda);
RcppExport SEXP _GEDI_solveZ_noC(SEXP Y_resSEXP, SEXP DSEXP, SEXP BSEXP, SEXP diagKSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_res(Y_resSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diagK(diagKSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveZ_noC(Y_res, D, B, diagK, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveZ_wC
SEXP solveZ_wC(Eigen::MatrixXd Y_res, Eigen::VectorXd D, Eigen::MatrixXd B, Eigen::MatrixXd C, Eigen::MatrixXd A, Eigen::MatrixXd diagK, double lambda);
RcppExport SEXP _GEDI_solveZ_wC(SEXP Y_resSEXP, SEXP DSEXP, SEXP BSEXP, SEXP CSEXP, SEXP ASEXP, SEXP diagKSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_res(Y_resSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type C(CSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diagK(diagKSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveZ_wC(Y_res, D, B, C, A, diagK, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveU
SEXP solveU(Eigen::MatrixXd Y_res, Eigen::VectorXd S, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_solveU(SEXP Y_resSEXP, SEXP SSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_res(Y_resSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solveU(Y_res, S, B));
    return rcpp_result_gen;
END_RCPP
}
// solveQi_noH
SEXP solveQi_noH(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi, Eigen::VectorXd D, Eigen::MatrixXd Bi, Eigen::MatrixXd diagK, double lambda);
RcppExport SEXP _GEDI_solveQi_noH(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP DSEXP, SEXP BiSEXP, SEXP diagKSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Bi(BiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diagK(diagKSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveQi_noH(Yi, ZDBi, si, o, oi, D, Bi, diagK, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveQi_wH
SEXP solveQi_wH(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi, Eigen::VectorXd D, Eigen::MatrixXd Bi, Eigen::MatrixXd Qi_hat, Eigen::MatrixXd diagK, double lambda);
RcppExport SEXP _GEDI_solveQi_wH(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP DSEXP, SEXP BiSEXP, SEXP Qi_hatSEXP, SEXP diagKSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Bi(BiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Qi_hat(Qi_hatSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diagK(diagKSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveQi_wH(Yi, ZDBi, si, o, oi, D, Bi, Qi_hat, diagK, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveOi_noH
SEXP solveOi_noH(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd ni, Eigen::VectorXd si, Eigen::VectorXd o, double Ni, double lambda);
RcppExport SEXP _GEDI_solveOi_noH(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP niSEXP, SEXP siSEXP, SEXP oSEXP, SEXP NiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type ni(niSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type Ni(NiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveOi_noH(Yi, ZDBi, QiDBi, ni, si, o, Ni, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveOi_wH
SEXP solveOi_wH(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd ni, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi_hat, double Ni, double lambda);
RcppExport SEXP _GEDI_solveOi_wH(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP niSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oi_hatSEXP, SEXP NiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type ni(niSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi_hat(oi_hatSEXP);
    Rcpp::traits::input_parameter< double >::type Ni(NiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveOi_wH(Yi, ZDBi, QiDBi, ni, si, o, oi_hat, Ni, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solveSi
SEXP solveSi(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd j, Eigen::VectorXd o, Eigen::VectorXd oi, Eigen::VectorXd si_0, double J, double lambda);
RcppExport SEXP _GEDI_solveSi(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP jSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP si_0SEXP, SEXP JSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type j(jSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si_0(si_0SEXP);
    Rcpp::traits::input_parameter< double >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solveSi(Yi, ZDBi, QiDBi, j, o, oi, si_0, J, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Yi_resO_rowSum
SEXP Yi_resO_rowSum(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd ni, Eigen::VectorXd si, Eigen::VectorXd oi);
RcppExport SEXP _GEDI_Yi_resO_rowSum(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP niSEXP, SEXP siSEXP, SEXP oiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type ni(niSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_resO_rowSum(Yi, ZDBi, QiDBi, ni, si, oi));
    return rcpp_result_gen;
END_RCPP
}
// solveYi
SEXP solveYi(Eigen::SparseMatrix<double> Mi, Eigen::ArrayXXd Yi, Eigen::ArrayXXd ZDBi, Eigen::ArrayXXd QiDBi, Eigen::ArrayXd si, Eigen::ArrayXd o, Eigen::ArrayXd oi, double sigma2);
RcppExport SEXP _GEDI_solveYi(SEXP MiSEXP, SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type Mi(MiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(solveYi(Mi, Yi, ZDBi, QiDBi, si, o, oi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// solveYi_paired
SEXP solveYi_paired(Eigen::SparseMatrix<double> M1i, Eigen::SparseMatrix<double> M2i, Eigen::ArrayXXd Yi, Eigen::ArrayXXd ZDBi, Eigen::ArrayXXd QiDBi, Eigen::ArrayXd si, Eigen::ArrayXd o, Eigen::ArrayXd oi, double sigma2);
RcppExport SEXP _GEDI_solveYi_paired(SEXP M1iSEXP, SEXP M2iSEXP, SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M1i(M1iSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M2i(M2iSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(solveYi_paired(M1i, M2i, Yi, ZDBi, QiDBi, si, o, oi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// vecL2_noPrior
double vecL2_noPrior(Eigen::VectorXd x);
RcppExport SEXP _GEDI_vecL2_noPrior(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vecL2_noPrior(x));
    return rcpp_result_gen;
END_RCPP
}
// vecL2_wPrior
double vecL2_wPrior(Eigen::VectorXd x, Eigen::VectorXd prior);
RcppExport SEXP _GEDI_vecL2_wPrior(SEXP xSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(vecL2_wPrior(x, prior));
    return rcpp_result_gen;
END_RCPP
}
// matL2_noPrior
double matL2_noPrior(Eigen::MatrixXd X);
RcppExport SEXP _GEDI_matL2_noPrior(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(matL2_noPrior(X));
    return rcpp_result_gen;
END_RCPP
}
// matL2_wPrior
double matL2_wPrior(Eigen::MatrixXd X, Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_matL2_wPrior(SEXP XSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matL2_wPrior(X, A, B));
    return rcpp_result_gen;
END_RCPP
}
// Yi_SSE_fixed
double Yi_SSE_fixed(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi);
RcppExport SEXP _GEDI_Yi_SSE_fixed(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_SSE_fixed(Yi, ZDBi, QiDBi, si, o, oi));
    return rcpp_result_gen;
END_RCPP
}
// Yi_SSE_M
double Yi_SSE_M(Eigen::MatrixXd Yi, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi, double sigma2);
RcppExport SEXP _GEDI_Yi_SSE_M(SEXP YiSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_SSE_M(Yi, ZDBi, QiDBi, si, o, oi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// Yi_SSE_M_paired
double Yi_SSE_M_paired(Eigen::MatrixXd Yi, Eigen::SparseMatrix<double> M1i, Eigen::SparseMatrix<double> M2i, Eigen::MatrixXd ZDBi, Eigen::MatrixXd QiDBi, Eigen::VectorXd si, Eigen::VectorXd o, Eigen::VectorXd oi, double sigma2);
RcppExport SEXP _GEDI_Yi_SSE_M_paired(SEXP YiSEXP, SEXP M1iSEXP, SEXP M2iSEXP, SEXP ZDBiSEXP, SEXP QiDBiSEXP, SEXP siSEXP, SEXP oSEXP, SEXP oiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M1i(M1iSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M2i(M2iSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZDBi(ZDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type QiDBi(QiDBiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type si(siSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type o(oSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type oi(oiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_SSE_M_paired(Yi, M1i, M2i, ZDBi, QiDBi, si, o, oi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// Yi_var
SEXP Yi_var(Eigen::MatrixXd Yi, double sigma2);
RcppExport SEXP _GEDI_Yi_var(SEXP YiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_var(Yi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// Yi_var_paired
SEXP Yi_var_paired(Eigen::MatrixXd Yi, Eigen::SparseMatrix<double> M1i, Eigen::SparseMatrix<double> M2i, double sigma2);
RcppExport SEXP _GEDI_Yi_var_paired(SEXP YiSEXP, SEXP M1iSEXP, SEXP M2iSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M1i(M1iSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type M2i(M2iSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(Yi_var_paired(Yi, M1i, M2i, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// matRMSD
double matRMSD(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _GEDI_matRMSD(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matRMSD(A, B));
    return rcpp_result_gen;
END_RCPP
}
// vecRMSD
double vecRMSD(Eigen::VectorXd A, Eigen::VectorXd B);
RcppExport SEXP _GEDI_vecRMSD(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(vecRMSD(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GEDI_eigenMatProduct", (DL_FUNC) &_GEDI_eigenMatProduct, 2},
    {"_GEDI_eigenMatTcrossprod", (DL_FUNC) &_GEDI_eigenMatTcrossprod, 2},
    {"_GEDI_eigenMatCrossprod", (DL_FUNC) &_GEDI_eigenMatCrossprod, 2},
    {"_GEDI_eigenMatVecProduct", (DL_FUNC) &_GEDI_eigenMatVecProduct, 2},
    {"_GEDI_eigenVecMatProduct", (DL_FUNC) &_GEDI_eigenVecMatProduct, 2},
    {"_GEDI_eigenVecVecProduct", (DL_FUNC) &_GEDI_eigenVecVecProduct, 2},
    {"_GEDI_eigenRowL2", (DL_FUNC) &_GEDI_eigenRowL2, 1},
    {"_GEDI_eigenColL2", (DL_FUNC) &_GEDI_eigenColL2, 1},
    {"_GEDI_eigenColL1", (DL_FUNC) &_GEDI_eigenColL1, 1},
    {"_GEDI_eigenRowMult", (DL_FUNC) &_GEDI_eigenRowMult, 2},
    {"_GEDI_solveBi", (DL_FUNC) &_GEDI_solveBi, 8},
    {"_GEDI_Yi_resZ", (DL_FUNC) &_GEDI_Yi_resZ, 5},
    {"_GEDI_solveZ_noC", (DL_FUNC) &_GEDI_solveZ_noC, 5},
    {"_GEDI_solveZ_wC", (DL_FUNC) &_GEDI_solveZ_wC, 7},
    {"_GEDI_solveU", (DL_FUNC) &_GEDI_solveU, 3},
    {"_GEDI_solveQi_noH", (DL_FUNC) &_GEDI_solveQi_noH, 9},
    {"_GEDI_solveQi_wH", (DL_FUNC) &_GEDI_solveQi_wH, 10},
    {"_GEDI_solveOi_noH", (DL_FUNC) &_GEDI_solveOi_noH, 8},
    {"_GEDI_solveOi_wH", (DL_FUNC) &_GEDI_solveOi_wH, 9},
    {"_GEDI_solveSi", (DL_FUNC) &_GEDI_solveSi, 9},
    {"_GEDI_Yi_resO_rowSum", (DL_FUNC) &_GEDI_Yi_resO_rowSum, 6},
    {"_GEDI_solveYi", (DL_FUNC) &_GEDI_solveYi, 8},
    {"_GEDI_solveYi_paired", (DL_FUNC) &_GEDI_solveYi_paired, 9},
    {"_GEDI_vecL2_noPrior", (DL_FUNC) &_GEDI_vecL2_noPrior, 1},
    {"_GEDI_vecL2_wPrior", (DL_FUNC) &_GEDI_vecL2_wPrior, 2},
    {"_GEDI_matL2_noPrior", (DL_FUNC) &_GEDI_matL2_noPrior, 1},
    {"_GEDI_matL2_wPrior", (DL_FUNC) &_GEDI_matL2_wPrior, 3},
    {"_GEDI_Yi_SSE_fixed", (DL_FUNC) &_GEDI_Yi_SSE_fixed, 6},
    {"_GEDI_Yi_SSE_M", (DL_FUNC) &_GEDI_Yi_SSE_M, 7},
    {"_GEDI_Yi_SSE_M_paired", (DL_FUNC) &_GEDI_Yi_SSE_M_paired, 9},
    {"_GEDI_Yi_var", (DL_FUNC) &_GEDI_Yi_var, 2},
    {"_GEDI_Yi_var_paired", (DL_FUNC) &_GEDI_Yi_var_paired, 4},
    {"_GEDI_matRMSD", (DL_FUNC) &_GEDI_matRMSD, 2},
    {"_GEDI_vecRMSD", (DL_FUNC) &_GEDI_vecRMSD, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GEDI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
